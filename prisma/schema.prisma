generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  userId        String?    @unique
  firstName     String
  lastName      String?
  email         String     @unique
  password      String
  role          UserRole   @default(USER)
  status        UserStatus @default(ACTIVE)
  bio           String?
  contactNumber String
  gender        Gender
  dob           DateTime?
  address       String?
  introduction  String?
  photoUrl      String?

  isEmailVerified         Boolean   @default(false)
  emailVerificationCode   String?
  emailVerificationExpiry DateTime?

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  education          Education[]
  socialLinks        SocialLinks[]
  orderBook          OrderBook[]
  orderCourse        OrderCourse[]
  activity           Activity[]
  courseCertificate  CourseCertificate[]
  podcastActivity    PodcastActivity[]
  courseProgress     CourseProgress[]
  bookingBookSpeaker BookingBookSpeaker[]
  subscription       Subscription[]

  @@map("users")
}

model ResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("reset-tokens")
}

model WebVisitor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  ip        String
  userAgent String?
  createdAt DateTime @default(now())

  @@map("web-visitors")
}

model PodcastActivity {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  userId    String         @db.ObjectId
  user      User           @relation(fields: [userId], references: [id])
  type      String         @default("PODCAST")
  action    ActivityAction @default(PLAY)
  podcastId String         @db.ObjectId
  podcast   Podcast        @relation(fields: [podcastId], references: [id])

  createdAt DateTime @default(now())

  @@index([userId, type, createdAt(sort: Desc)])
  @@index([podcastId, createdAt(sort: Desc)])
  @@map("podcast-activities")
}

enum ActivityAction {
  PLAY
  COMPLETE
}

model Activity {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  userId    String       @db.ObjectId
  user      User         @relation(fields: [userId], references: [id])
  product   String
  type      ActivityType
  createdAt DateTime     @default(now())

  @@map("activities")
}

enum ActivityType {
  BOOK
  COURSE
  SUBSCRIPTION
}

model BookSpeaker {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String
  contactNumber String
  date          String
  profession    String
  language      String
  location      String
  experience    String
  bio           String
  expertise     String[]
  achievements  String[]
  reasons       String
  imageUrl      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("book-speakers")
}

model BookingBookSpeaker {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  firstName     String
  lastName      String
  contactNumber String
  email         String
  date          String
  time          String
  yourNote      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("booking-book-speakers")
}

model Education {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  degree      String?
  institution String?
  field       String?
  userId      String  @db.ObjectId
  user        User    @relation(fields: [userId], references: [id])

  @@map("educations")
}

model SocialLinks {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  facebook  String?
  twitter   String?
  linkedin  String?
  instagram String?
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])

  @@map("social-links")
}

model Book {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  bookName         String
  authorName       String
  price            Float
  discountPrice    Float
  brand            String
  description      String
  language         String
  size             String
  availableFormats String[]
  category         String
  isPublished      Boolean  @default(false)
  publishDate      DateTime @default(now())
  rating           Float    @default(0)
  bookCover        String
  book             String

  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  orderItems OrderBookItem[]

  @@map("books")
}

model OrderBook {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  user          User          @relation(fields: [userId], references: [id])
  amount        Float
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod @default(STRIPE)
  transactionId String?
  createdAt     DateTime      @default(now())

  items OrderBookItem[]

  @@map("order-books")
}

model OrderBookItem {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId  String    @db.ObjectId
  order    OrderBook @relation(fields: [orderId], references: [id])
  bookId   String    @db.ObjectId
  book     Book      @relation(fields: [bookId], references: [id])
  quantity Int       @default(1)
  price    Float

  @@map("order-book-items")
}

model Course {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  courseTitle   String
  mentorName    String
  category      String
  price         Float
  discountPrice Float
  totalVideo    Int
  language      String
  duration      String
  description   String
  thumbImage    String?
  isPublished   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  courseModules     CourseModule[]
  courseCertificate CourseCertificate[]
  orderCourse       OrderCourse[]
  orderCourseItem   OrderCourseItem[]
  courseProgress    CourseProgress[]

  @@map("courses")
}

model OrderCourse {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  user          User          @relation(fields: [userId], references: [id])
  amount        Float
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod @default(STRIPE)
  transactionId String?
  createdAt     DateTime      @default(now())

  items    OrderCourseItem[]
  courseId String?           @db.ObjectId
  course   Course?           @relation(fields: [courseId], references: [id])

  @@map("order-courses")
}

model OrderCourseItem {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId  String      @db.ObjectId
  order    OrderCourse @relation(fields: [orderId], references: [id])
  courseId String      @db.ObjectId
  course   Course      @relation(fields: [courseId], references: [id])
  price    Float
  quantity Int         @default(1)

  @@map("order-course-items")
}

model CourseCertificate {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id])
  userId   String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])

  certificateNo  String   @unique
  certificateUrl String
  verifyCode     String   @unique
  issuedAt       DateTime @default(now())

  @@index([courseId, userId])
  @@map("course-certificates")
}

model CourseModule {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  moduleTitle        String
  order              Int                 @default(0)
  courseModuleVideos CourseModuleVideo[]
  courseId           String              @db.ObjectId
  course             Course              @relation(fields: [courseId], references: [id])

  @@index([courseId, order])
  @@map("courseModules")
}

model CourseModuleVideo {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  thumbImage     String?
  videoTitle     String
  fileUrl        String?
  order          Int          @default(0)
  courseModuleId String       @db.ObjectId
  courseModule   CourseModule @relation(fields: [courseModuleId], references: [id])

  @@index([courseModuleId, order])
  @@map("course-module-videos")
}

model CourseProgress {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id])

  currentModuleId String? @db.ObjectId
  currentVideoId  String? @db.ObjectId

  completedVideos  String[]
  completedModules String[]

  percentCompleted Float     @default(0)
  isCompleted      Boolean   @default(false)
  startedAt        DateTime  @default(now())
  completedAt      DateTime?
  lastActivityAt   DateTime  @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@map("course-progress")
}

model Blog {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  blogTitle    String
  content      String
  category     String
  featureMedia String[]
  isPublished  Boolean  @default(false)
  publishDate  DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("blogs")
}

model Podcast {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  podcastTitle    String
  secondaryTitle  String
  category        String
  constent        String
  featureMedia    String[]
  thumbImage      String?
  isPublished     Boolean           @default(false)
  publishDate     DateTime          @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  podcastActivity PodcastActivity[]

  @@map("podcasts")
}

model SpeakingSample {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sampleTitle  String
  content      String
  category     String
  featureMedia String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("speaking-samples")
}

model Contact {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  email       String
  phoneNumber String
  message     String
  createdAt   DateTime @default(now())

  @@map("contacts")
}

model Newsletter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("newsletters")
}

model Counter {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  seq  Int

  @@map("counters")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum UserRole {
  ADMIN
  USER
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELED
}

enum PaymentMethod {
  STRIPE
  VISA
}

model SubscriptionPlan {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String[]
  sessions      Int
  price         Float
  discountPrice Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  subscriptions Subscription[]

  @@map("subscription-plans")
}

model Subscription {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  userId        String             @db.ObjectId
  user          User               @relation(fields: [userId], references: [id])
  planId        String             @db.ObjectId
  plan          SubscriptionPlan   @relation(fields: [planId], references: [id])
  paymentStatus PaymentStatus      @default(PENDING)
  paymentMethod PaymentMethod      @default(STRIPE)
  transactionId String?
  status        SubscriptionStatus @default(PENDING) // Pending → Connected
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@map("subscriptions")
}

enum SubscriptionStatus {
  PENDING
  CONNECTED
  CANCELED
}
