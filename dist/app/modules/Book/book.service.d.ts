import { Book } from "@prisma/client";
import { IFile } from "../../../interfaces/file";
import { IGenericResponse } from "../../../interfaces/common";
export declare const BookServices: {
    createBookIntoDB: (payload: Book, book: IFile, bookCover: IFile) => Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        book: string;
        price: number;
        bookName: string;
        authorName: string;
        discountPrice: number;
        brand: string;
        description: string;
        language: string;
        size: string;
        availableFormats: string[];
        category: string;
        isPublished: boolean;
        publishDate: Date;
        rating: number;
        bookCover: string;
    }>;
    getAllBooksFromDB: (query: Record<string, any>) => Promise<IGenericResponse<Book[]>>;
    getPublishedBooksFromDB: (query: Record<string, any>) => Promise<IGenericResponse<Book[]>>;
    getBookByIdFromDB: (id: string) => Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        book: string;
        price: number;
        bookName: string;
        authorName: string;
        discountPrice: number;
        brand: string;
        description: string;
        language: string;
        size: string;
        availableFormats: string[];
        category: string;
        isPublished: boolean;
        publishDate: Date;
        rating: number;
        bookCover: string;
    }>;
    updateBookInDB: (id: string, payload?: Partial<Book>, book?: IFile, bookCover?: IFile) => Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        book: string;
        price: number;
        bookName: string;
        authorName: string;
        discountPrice: number;
        brand: string;
        description: string;
        language: string;
        size: string;
        availableFormats: string[];
        category: string;
        isPublished: boolean;
        publishDate: Date;
        rating: number;
        bookCover: string;
    }>;
    deleteBookFromDB: (id: string) => Promise<{
        message: string;
    }>;
    updatePublishedStatus: (id: string, status: boolean) => Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        book: string;
        price: number;
        bookName: string;
        authorName: string;
        discountPrice: number;
        brand: string;
        description: string;
        language: string;
        size: string;
        availableFormats: string[];
        category: string;
        isPublished: boolean;
        publishDate: Date;
        rating: number;
        bookCover: string;
    }>;
    getRelatedBooksFromDB: (bookId: string, query: Record<string, any>) => Promise<IGenericResponse<Book[]>>;
    ratingToBook: (bookId: string, rating: number) => Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        book: string;
        price: number;
        bookName: string;
        authorName: string;
        discountPrice: number;
        brand: string;
        description: string;
        language: string;
        size: string;
        availableFormats: string[];
        category: string;
        isPublished: boolean;
        publishDate: Date;
        rating: number;
        bookCover: string;
    }>;
    getMostPopularBooksFromDB: (query: Record<string, any>) => Promise<IGenericResponse<Book[]>>;
    getNewBooksFromDB: (query: Record<string, any>) => Promise<IGenericResponse<Book[]>>;
};
//# sourceMappingURL=book.service.d.ts.map